// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: magnetar.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MagnetarClient is the client API for Magnetar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MagnetarClient interface {
	GetFromNodePool(ctx context.Context, in *GetFromNodePoolReq, opts ...grpc.CallOption) (*GetFromNodePoolResp, error)
	GetFromOrg(ctx context.Context, in *GetFromOrgReq, opts ...grpc.CallOption) (*GetFromOrgResp, error)
	ClaimOwnership(ctx context.Context, in *ClaimOwnershipReq, opts ...grpc.CallOption) (*ClaimOwnershipResp, error)
	ListNodePool(ctx context.Context, in *ListNodePoolReq, opts ...grpc.CallOption) (*ListNodePoolResp, error)
	ListOrgOwnedNodes(ctx context.Context, in *ListOrgOwnedNodesReq, opts ...grpc.CallOption) (*ListOrgOwnedNodesResp, error)
	QueryNodePool(ctx context.Context, in *QueryNodePoolReq, opts ...grpc.CallOption) (*QueryNodePoolResp, error)
	QueryOrgOwnedNodes(ctx context.Context, in *QueryOrgOwnedNodesReq, opts ...grpc.CallOption) (*QueryOrgOwnedNodesResp, error)
	PutBoolLabel(ctx context.Context, in *PutBoolLabelReq, opts ...grpc.CallOption) (*PutLabelResp, error)
	PutFloat64Label(ctx context.Context, in *PutFloat64LabelReq, opts ...grpc.CallOption) (*PutLabelResp, error)
	PutStringLabel(ctx context.Context, in *PutStringLabelReq, opts ...grpc.CallOption) (*PutLabelResp, error)
	DeleteLabel(ctx context.Context, in *DeleteLabelReq, opts ...grpc.CallOption) (*DeleteLabelResp, error)
	ListAllNodes(ctx context.Context, in *ListAllNodesReq, opts ...grpc.CallOption) (*ListAllNodesResp, error)
}

type magnetarClient struct {
	cc grpc.ClientConnInterface
}

func NewMagnetarClient(cc grpc.ClientConnInterface) MagnetarClient {
	return &magnetarClient{cc}
}

func (c *magnetarClient) GetFromNodePool(ctx context.Context, in *GetFromNodePoolReq, opts ...grpc.CallOption) (*GetFromNodePoolResp, error) {
	out := new(GetFromNodePoolResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/GetFromNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) GetFromOrg(ctx context.Context, in *GetFromOrgReq, opts ...grpc.CallOption) (*GetFromOrgResp, error) {
	out := new(GetFromOrgResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/GetFromOrg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) ClaimOwnership(ctx context.Context, in *ClaimOwnershipReq, opts ...grpc.CallOption) (*ClaimOwnershipResp, error) {
	out := new(ClaimOwnershipResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/ClaimOwnership", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) ListNodePool(ctx context.Context, in *ListNodePoolReq, opts ...grpc.CallOption) (*ListNodePoolResp, error) {
	out := new(ListNodePoolResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/ListNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) ListOrgOwnedNodes(ctx context.Context, in *ListOrgOwnedNodesReq, opts ...grpc.CallOption) (*ListOrgOwnedNodesResp, error) {
	out := new(ListOrgOwnedNodesResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/ListOrgOwnedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) QueryNodePool(ctx context.Context, in *QueryNodePoolReq, opts ...grpc.CallOption) (*QueryNodePoolResp, error) {
	out := new(QueryNodePoolResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/QueryNodePool", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) QueryOrgOwnedNodes(ctx context.Context, in *QueryOrgOwnedNodesReq, opts ...grpc.CallOption) (*QueryOrgOwnedNodesResp, error) {
	out := new(QueryOrgOwnedNodesResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/QueryOrgOwnedNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) PutBoolLabel(ctx context.Context, in *PutBoolLabelReq, opts ...grpc.CallOption) (*PutLabelResp, error) {
	out := new(PutLabelResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/PutBoolLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) PutFloat64Label(ctx context.Context, in *PutFloat64LabelReq, opts ...grpc.CallOption) (*PutLabelResp, error) {
	out := new(PutLabelResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/PutFloat64Label", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) PutStringLabel(ctx context.Context, in *PutStringLabelReq, opts ...grpc.CallOption) (*PutLabelResp, error) {
	out := new(PutLabelResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/PutStringLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) DeleteLabel(ctx context.Context, in *DeleteLabelReq, opts ...grpc.CallOption) (*DeleteLabelResp, error) {
	out := new(DeleteLabelResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/DeleteLabel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *magnetarClient) ListAllNodes(ctx context.Context, in *ListAllNodesReq, opts ...grpc.CallOption) (*ListAllNodesResp, error) {
	out := new(ListAllNodesResp)
	err := c.cc.Invoke(ctx, "/proto.Magnetar/ListAllNodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MagnetarServer is the server API for Magnetar service.
// All implementations must embed UnimplementedMagnetarServer
// for forward compatibility
type MagnetarServer interface {
	GetFromNodePool(context.Context, *GetFromNodePoolReq) (*GetFromNodePoolResp, error)
	GetFromOrg(context.Context, *GetFromOrgReq) (*GetFromOrgResp, error)
	ClaimOwnership(context.Context, *ClaimOwnershipReq) (*ClaimOwnershipResp, error)
	ListNodePool(context.Context, *ListNodePoolReq) (*ListNodePoolResp, error)
	ListOrgOwnedNodes(context.Context, *ListOrgOwnedNodesReq) (*ListOrgOwnedNodesResp, error)
	QueryNodePool(context.Context, *QueryNodePoolReq) (*QueryNodePoolResp, error)
	QueryOrgOwnedNodes(context.Context, *QueryOrgOwnedNodesReq) (*QueryOrgOwnedNodesResp, error)
	PutBoolLabel(context.Context, *PutBoolLabelReq) (*PutLabelResp, error)
	PutFloat64Label(context.Context, *PutFloat64LabelReq) (*PutLabelResp, error)
	PutStringLabel(context.Context, *PutStringLabelReq) (*PutLabelResp, error)
	DeleteLabel(context.Context, *DeleteLabelReq) (*DeleteLabelResp, error)
	ListAllNodes(context.Context, *ListAllNodesReq) (*ListAllNodesResp, error)
	mustEmbedUnimplementedMagnetarServer()
}

// UnimplementedMagnetarServer must be embedded to have forward compatible implementations.
type UnimplementedMagnetarServer struct {
}

func (UnimplementedMagnetarServer) GetFromNodePool(context.Context, *GetFromNodePoolReq) (*GetFromNodePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromNodePool not implemented")
}
func (UnimplementedMagnetarServer) GetFromOrg(context.Context, *GetFromOrgReq) (*GetFromOrgResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFromOrg not implemented")
}
func (UnimplementedMagnetarServer) ClaimOwnership(context.Context, *ClaimOwnershipReq) (*ClaimOwnershipResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClaimOwnership not implemented")
}
func (UnimplementedMagnetarServer) ListNodePool(context.Context, *ListNodePoolReq) (*ListNodePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListNodePool not implemented")
}
func (UnimplementedMagnetarServer) ListOrgOwnedNodes(context.Context, *ListOrgOwnedNodesReq) (*ListOrgOwnedNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListOrgOwnedNodes not implemented")
}
func (UnimplementedMagnetarServer) QueryNodePool(context.Context, *QueryNodePoolReq) (*QueryNodePoolResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryNodePool not implemented")
}
func (UnimplementedMagnetarServer) QueryOrgOwnedNodes(context.Context, *QueryOrgOwnedNodesReq) (*QueryOrgOwnedNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryOrgOwnedNodes not implemented")
}
func (UnimplementedMagnetarServer) PutBoolLabel(context.Context, *PutBoolLabelReq) (*PutLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutBoolLabel not implemented")
}
func (UnimplementedMagnetarServer) PutFloat64Label(context.Context, *PutFloat64LabelReq) (*PutLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFloat64Label not implemented")
}
func (UnimplementedMagnetarServer) PutStringLabel(context.Context, *PutStringLabelReq) (*PutLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutStringLabel not implemented")
}
func (UnimplementedMagnetarServer) DeleteLabel(context.Context, *DeleteLabelReq) (*DeleteLabelResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLabel not implemented")
}
func (UnimplementedMagnetarServer) ListAllNodes(context.Context, *ListAllNodesReq) (*ListAllNodesResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllNodes not implemented")
}
func (UnimplementedMagnetarServer) mustEmbedUnimplementedMagnetarServer() {}

// UnsafeMagnetarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MagnetarServer will
// result in compilation errors.
type UnsafeMagnetarServer interface {
	mustEmbedUnimplementedMagnetarServer()
}

func RegisterMagnetarServer(s grpc.ServiceRegistrar, srv MagnetarServer) {
	s.RegisterService(&Magnetar_ServiceDesc, srv)
}

func _Magnetar_GetFromNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromNodePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).GetFromNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/GetFromNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).GetFromNodePool(ctx, req.(*GetFromNodePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_GetFromOrg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFromOrgReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).GetFromOrg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/GetFromOrg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).GetFromOrg(ctx, req.(*GetFromOrgReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_ClaimOwnership_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClaimOwnershipReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).ClaimOwnership(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/ClaimOwnership",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).ClaimOwnership(ctx, req.(*ClaimOwnershipReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_ListNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListNodePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).ListNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/ListNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).ListNodePool(ctx, req.(*ListNodePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_ListOrgOwnedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListOrgOwnedNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).ListOrgOwnedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/ListOrgOwnedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).ListOrgOwnedNodes(ctx, req.(*ListOrgOwnedNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_QueryNodePool_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNodePoolReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).QueryNodePool(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/QueryNodePool",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).QueryNodePool(ctx, req.(*QueryNodePoolReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_QueryOrgOwnedNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOrgOwnedNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).QueryOrgOwnedNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/QueryOrgOwnedNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).QueryOrgOwnedNodes(ctx, req.(*QueryOrgOwnedNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_PutBoolLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutBoolLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).PutBoolLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/PutBoolLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).PutBoolLabel(ctx, req.(*PutBoolLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_PutFloat64Label_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFloat64LabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).PutFloat64Label(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/PutFloat64Label",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).PutFloat64Label(ctx, req.(*PutFloat64LabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_PutStringLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutStringLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).PutStringLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/PutStringLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).PutStringLabel(ctx, req.(*PutStringLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_DeleteLabel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLabelReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).DeleteLabel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/DeleteLabel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).DeleteLabel(ctx, req.(*DeleteLabelReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Magnetar_ListAllNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllNodesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MagnetarServer).ListAllNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Magnetar/ListAllNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MagnetarServer).ListAllNodes(ctx, req.(*ListAllNodesReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Magnetar_ServiceDesc is the grpc.ServiceDesc for Magnetar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Magnetar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Magnetar",
	HandlerType: (*MagnetarServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFromNodePool",
			Handler:    _Magnetar_GetFromNodePool_Handler,
		},
		{
			MethodName: "GetFromOrg",
			Handler:    _Magnetar_GetFromOrg_Handler,
		},
		{
			MethodName: "ClaimOwnership",
			Handler:    _Magnetar_ClaimOwnership_Handler,
		},
		{
			MethodName: "ListNodePool",
			Handler:    _Magnetar_ListNodePool_Handler,
		},
		{
			MethodName: "ListOrgOwnedNodes",
			Handler:    _Magnetar_ListOrgOwnedNodes_Handler,
		},
		{
			MethodName: "QueryNodePool",
			Handler:    _Magnetar_QueryNodePool_Handler,
		},
		{
			MethodName: "QueryOrgOwnedNodes",
			Handler:    _Magnetar_QueryOrgOwnedNodes_Handler,
		},
		{
			MethodName: "PutBoolLabel",
			Handler:    _Magnetar_PutBoolLabel_Handler,
		},
		{
			MethodName: "PutFloat64Label",
			Handler:    _Magnetar_PutFloat64Label_Handler,
		},
		{
			MethodName: "PutStringLabel",
			Handler:    _Magnetar_PutStringLabel_Handler,
		},
		{
			MethodName: "DeleteLabel",
			Handler:    _Magnetar_DeleteLabel_Handler,
		},
		{
			MethodName: "ListAllNodes",
			Handler:    _Magnetar_ListAllNodes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "magnetar.proto",
}
